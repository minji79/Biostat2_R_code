####################################################################
###        Data Wrangling | dplyr & tidyr         
###        self test : 3/26
####################################################################

##### reshaping data #####

# with tidyr

gather(cases, "year", "n", 2:4)
separate(storms, date, c("y","m","d"))

spread(pollution, size, amount)
unite(data, col, ... , sep)

# with dplyr

data_frame(a=1:3, b=4:6)
arrange(mtcars, mpg)
arrange(mtcars, desc(mpg))

rename(tb, y=year)


##### subset observations (rows) #####

filter(iris, sepal.length>7)
distinct(iris)
sample_frac(iris, 0.5, replace=TRUE)
sample_n(iris, 10, replace=TRUE)
slice(iris, 10:15)
top_n(storms, 2, date)


##### subset variables (columns) #####

select(iris, sepal.width, petal.length, species)
select(iris, 




##### summarise data #####



##### make new variables #####


## example of 'ntile' ##
library(dplyr)

# Create a vector of 100 random numbers
set.seed(123)
data <- runif(100)

# Divide the data into quartiles
quartiles <- ntile(data, 4)

# View the first 10 elements of data and their corresponding quartile
head(data.frame(data, quartiles), 10)


# In this example, the `runif` function generates 100 random numbers uniformly distributed between 0 and 1. 
# Then the `ntile` function is used to divide these numbers into 4 quartiles. The `head` function is used to display the first 10 elements of the original data and their corresponding quartile assignments.


##### group data #####





##### combine data sets #####













       
